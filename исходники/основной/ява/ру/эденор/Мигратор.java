package ру.эденор;

import ру.эденор.адапторы.ИсключениеВводаВывода;
import ру.эденор.адапторы.ИсключениеКлассНеНайден;
import ру.эденор.адапторы.ИсключениеНелегальногоАргумента;
import ру.эденор.адапторы.ИсключениеЯСЗ;
import ру.эденор.адапторы.Класс;
import ру.эденор.адапторы.Математика;
import ру.эденор.адапторы.МетаДанныеОтветногоНабора;
import ру.эденор.адапторы.ОтветныйНабор;
import ру.эденор.адапторы.ПодготовленноеПоложение;
import ру.эденор.адапторы.Подключение;
import ру.эденор.адапторы.Положение;
import ру.эденор.адапторы.Свойства;
import ру.эденор.адапторы.СвязнойХешовыйСловарь;
import ру.эденор.адапторы.Система;
import ру.эденор.адапторы.Словарь;
import ру.эденор.адапторы.Список;
import ру.эденор.адапторы.СписокНаОсновеМассива;
import ру.эденор.адапторы.Строки;
import ру.эденор.адапторы.СтрочныйСтроитель;
import ру.эденор.адапторы.УправляющийДрайверами;
import ру.эденор.адапторы.Файлы;
import ру.эденор.адапторы.Целый;

public class Мигратор {

  private static final long СЕКУНД_В_ГОДЕ = 31536000;
  private Подключение подклМарии;
  private Подключение подклЛайта;
  private НастройкиМигратора настройки;

  private static final long времяНачала = Система.времяСейчас();

  public static void main(String[] аргументы) throws ИсключениеЯСЗ, ИсключениеВводаВывода {
    Мигратор мигратор = new Мигратор();
    мигратор.пуск();
  }

  public Мигратор() throws ИсключениеВводаВывода {
    подгрузитьОкружение();
  }

  private void подгрузитьОкружение() throws ИсключениеВводаВывода {
    Свойства среда = new Свойства();
    var путьКСреде = Файлы.путь(".среда");
    if (!Файлы.существует(путьКСреде)) {
      Система.ошибкастр("Файл .среда не найден.");
      Система.ошибкастр(
          "Пожалуйста, создайте его на основе файла _среда и загрузите его командой \"source .среда\".");
      Система.выйти(1);
    }
    Список<String> строки = Файлы.прочитатьВсеСтроки(путьКСреде);
    for (String строка : строки) {
      if (!Строки.начинаетсяС(строка, "#") && Строки.содержит(строка, "=")) {
        String[] части = строка.split("=");
        среда.установитьСвойство(части[0].trim(), части[1].trim());
      }
    }
    настройки = НастройкиМигратора.изСреды(среда);
  }

  private Подключение подключениеМарии() throws ИсключениеЯСЗ {
    if (подклМарии == null) {
      try {
        Класс.поИмени("org.mariadb.jdbc.Driver");
      } catch (ИсключениеКлассНеНайден e) {
        Система.ошибка("Драйвер MariaDB не найден.");
        Система.выйти(1);
      }
      String ссылка =
          "jdbc:mariadb://"
              + настройки.адресМарии
              + ":"
              + настройки.портМарии
              + "/"
              + настройки.базаДанныхМарии;
      подклМарии =
          УправляющийДрайверами.подключиться(
              ссылка, настройки.пользовательМарии, настройки.парольМарии);
    }
    return подклМарии;
  }

  private void очиститьТаблицуМарии(String таблица) throws ИсключениеЯСЗ {
    Система.печатьф("Вычищаю %s... ", таблица);
    try (Положение положение = подключениеМарии().создатьПоложение()) {
      положение.исполнить("TRUNCATE TABLE `" + таблица + "`");
      положение.исполнить(
          "ALTER TABLE `"
              + таблица
              + "` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;");
      if (Строки.равны(таблица, "co_item")) {
        /* данные могут не вместиться в BLOB */
        положение.исполнить("ALTER TABLE `co_item` CHANGE `data` `data` MEDIUMBLOB NULL;");
      }
      if (Строки.равны(таблица, "co_container")) {
        /* данные могут не вместиться в BLOB */
        положение.исполнить(
            "ALTER TABLE `co_container` CHANGE `metadata` `metadata` LONGBLOB NULL;");
      }
    }
    Система.печатьстр("готово!");
  }

  static Integer ошибок = 0;
  static Список<String> таблицыСОшибками = new СписокНаОсновеМассива<>();

  private void вставитьДанныеВМарию(String таблица, String колонки, String значения)
      throws ИсключениеЯСЗ {
    try (Положение положение = подключениеМарии().создатьПоложение()) {
      подключениеМарии().выключитьАвтоПрименение(); // Начало транзакции
      String запрос = "INSERT INTO " + таблица + " (" + колонки + ") VALUES " + значения;
      try {
        положение.исполнить(запрос);
      } catch (ИсключениеЯСЗ и) {
        if (и.кодОшибки() == 42) {
          if (Строки.содержит(и.сообщение(), "Data too long")) {
            таблицыСОшибками.добавить(таблица);
            ошибок++;
          }
        }
        throw и;
      }
      подключениеМарии().применить(); // Применяем транзакцию
    } finally {
      подключениеМарии().включитьАвтоПрименение(); // Удостоверимся, что автоприменение сброшено
    }
  }

  private Подключение подключениеЛайта() throws ИсключениеЯСЗ {
    if (подклЛайта == null) {
      try {
        Класс.поИмени("org.sqlite.JDBC");
      } catch (ИсключениеКлассНеНайден и) {
        Система.ошибкастр("SQLite JDBC driver not found.");
        Система.выйти(1);
      }
      String ссылка = "jdbc:sqlite:" + настройки.файлЛайта;
      подклЛайта = УправляющийДрайверами.подключиться(ссылка);
    }
    return подклЛайта;
  }

  private Список<String> таблицыЛайта() throws ИсключениеЯСЗ {
    Список<String> таблицы = new СписокНаОсновеМассива<>();
    try (Положение положение = подключениеЛайта().создатьПоложение();
        ОтветныйНабор набор =
            положение.исполнитьЗапрос(
                "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")) {
      while (набор.следующий()) {
        таблицы.добавить(набор.достатьСтроку("name"));
      }
    }
    return таблицы;
  }

  private int количествоСтрокЛайта(String таблица) throws ИсключениеЯСЗ {
    Система.печатьф("Считаю количество строк таблицы " + таблица + "...%n");
    try (Положение положение = подключениеЛайта().создатьПоложение();
        ОтветныйНабор набор = положение.исполнитьЗапрос("SELECT COUNT(*) FROM " + таблица)) {
      набор.следующий();
      return набор.достатьЦел(1);
    }
  }

  private Список<String> колонкиТаблицыЛайта(String таблица) throws ИсключениеЯСЗ {
    try (ПодготовленноеПоложение положение =
        подключениеЛайта().подготовленныйЗапрос("SELECT * FROM " + таблица + " LIMIT 1")) {
      МетаДанныеОтветногоНабора метаДанные = положение.метаДанные();
      СписокНаОсновеМассива<String> колонки = new СписокНаОсновеМассива<>();
      for (int i = 1; i <= метаДанные.количествоКолонок(); i++) {
        String имяКолонки = метаДанные.имяКолонки(i);
        колонки.добавить(Строки.равны(имяКолонки, "id") ? "rowid" : имяКолонки);
      }
      return колонки;
    }
  }

  private Список<Словарь<String, Object>> заказатьЛайт(
      String таблица, int отлад, boolean фильтроватьПоВремени) throws ИсключениеЯСЗ {
    Список<Словарь<String, Object>> ряды = new СписокНаОсновеМассива<>();
    String фильтр = фильтроватьПоВремени ? фильтрПоВремени() : "";
    String ясз =
        Строки.отформатировать(
            "SELECT * FROM %s %s LIMIT %s OFFSET %s", таблица, фильтр, настройки.отлад, отлад);
    try (Положение положение = подключениеЛайта().создатьПоложение();
        ОтветныйНабор набор = положение.исполнитьЗапрос(ясз)) {
      МетаДанныеОтветногоНабора мета = набор.метаДанные();
      int колКолонок = мета.количествоКолонок();
      while (набор.следующий()) {
        Словарь<String, Object> ряд = new СвязнойХешовыйСловарь<>();
        for (int i = 1; i <= колКолонок; i++) {
          String имяКолонки = мета.имяКолонки(i);
          ряд.записать(имяКолонки, набор.достатьОбъект(i));
        }
        ряды.добавить(ряд);
      }
    }
    return ряды;
  }

  private String фильтрПоВремени() {
    if (Объекты.естьНеПустые(настройки.времяНачала, настройки.времяКонца)) {
      long начало = Объекты.значениеИли(настройки.времяНачала, 0L);
      long максимальноеЗначение = Система.времяСейчас() / 1000 + СЕКУНД_В_ГОДЕ;
      long конец = Объекты.значениеИли(настройки.времяКонца, максимальноеЗначение);
      return Строки.отформатировать("WHERE `time` BETWEEN %d AND %d", начало, конец);
    }
    return "";
  }

  private void подготовитьТаблицуМарииКВставке(
      String таблица, String колонки, Список<Словарь<String, Object>> ряды) throws ИсключениеЯСЗ {
    СтрочныйСтроитель значения = new СтрочныйСтроитель();
    for (Словарь<String, Object> ряд : ряды) {
      значения.прикрепить("(");
      for (Словарь.Запись<String, Object> запись : ряд.наборЗаписей()) {
        Object значение = запись.значение();
        switch (значение) {
          case String строка -> {
            String значениеВСтепени64 = Строки.закодироватьВСтепень64(строка);
            значения.прикрепить(", FROM_BASE64('").прикрепить(значениеВСтепени64).прикрепить("')");
          }
          case Number число -> значения.прикрепить(", ").прикрепить(число);
          case byte[] байты -> {
            String значениеВСтепени64 = Строки.закодироватьВСтепень64(байты);
            значения.прикрепить(", FROM_BASE64('").прикрепить(значениеВСтепени64).прикрепить("')");
          }
          case null -> значения.прикрепить(", null"); // Явно обрабатываем пустые значения
          default ->
              throw new ИсключениеНелегальногоАргумента(
                  "Неизвестный тип данных: " + Класс.поЭкземпляру(значение));
        }
      }
      значения.прикрепить("),");
    }

    String отформатированныеЗначения = Строки.заменить(значения.получить(), "(, ", "(");
    отформатированныеЗначения =
        Строки.заменитьРегулярнымВырожением(отформатированныеЗначения, "\\),$", ")");
    вставитьДанныеВМарию(таблица, колонки, отформатированныеЗначения);
  }

  private void обновитьRowidТаблицы(String таблица) throws ИсключениеЯСЗ {
    Система.печатьстр("Обновляю идентификаторы на значение rowid...");
    try (Положение положение = подключениеМарии().создатьПоложение()) {
      положение.исполнить("UPDATE " + таблица + " SET id = rowid WHERE id IS NULL;");
    }
  }

  private void пуск() throws ИсключениеЯСЗ {
    СписокНаОсновеМассива<String> таблицыПозволяющиеПустыеИдентификаторы =
        Список.из("co_art_map", "co_blockdata_map", "co_entity_map", "co_material_map", "co_world");

    try (Положение положение = подключениеМарии().создатьПоложение()) {
      положение.исполнить(
          "ALTER DATABASE "
              + настройки.базаДанныхМарии
              + " CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;");
      положение.исполнить("SET FOREIGN_KEY_CHECKS=0;");
      положение.исполнить("SET UNIQUE_CHECKS=0;");
      положение.исполнить("SET autocommit=0;");

      Список<String> таблицы = таблицыЛайта();
      for (String имяТаблицы : таблицы) {
        очиститьТаблицуМарии(имяТаблицы);
        Список<String> колонки = колонкиТаблицыЛайта(имяТаблицы);
        int всегоСтрок = количествоСтрокЛайта(имяТаблицы);
        String колонкиСтрокой = Строки.соединитьЧерез(",", колонки);

        Система.печатьф("Мигрирую %d строк из таблицы %s...\n", всегоСтрок, имяТаблицы);

        int индекс = 0;
        while (индекс < всегоСтрок) {
          Список<Словарь<String, Object>> ряды =
              заказатьЛайт(имяТаблицы, индекс, колонки.содержит("time"));
          подготовитьТаблицуМарииКВставке(имяТаблицы, колонкиСтрокой, ряды);

          индекс = Математика.минимум(индекс + настройки.отлад, всегоСтрок);
          long дт = Система.времяСейчас() - времяНачала;
          long часы = (дт / 1000) / 3600;
          long минуты = ((дт / 1000) % 3600) / 60;
          long секунды = (дт / 1000) % 60;

          Система.печатьф(
              "\33[2K\r%d/%d (%.2f%%)... [%02d:%02d:%02d] ",
              индекс, всегоСтрок, (float) индекс / всегоСтрок * 100, часы, минуты, секунды);
        }

        if (таблицыПозволяющиеПустыеИдентификаторы.содержит(имяТаблицы)) {
          обновитьRowidТаблицы(имяТаблицы);
        }

        Система.печатьстр("готово\n");
      }

      Система.ошибкастр("Количество ошибок: " + ошибок);
      if (ошибок > 0) {
        Система.ошибкастр("Таблицы с ошибками: " + таблицыСОшибками);
      }

      положение.исполнить("SET FOREIGN_KEY_CHECKS=1;");
      положение.исполнить("SET UNIQUE_CHECKS=1;");
      положение.исполнить("SET autocommit=1;");
    }
    if (подклМарии != null) {
      подклМарии.закрыть();
    }
    if (подклЛайта != null) {
      подклЛайта.закрыть();
    }
  }

  static class НастройкиМигратора {
    public String адресМарии;
    public String пользовательМарии;
    public String парольМарии;
    public String портМарии;
    public String базаДанныхМарии;
    public Integer отлад;
    public Long времяНачала;
    public Long времяКонца;
    public String файлЛайта;

    public static НастройкиМигратора изСреды(Свойства среда) {
      НастройкиМигратора настройкиМигратора = new НастройкиМигратора();
      настройкиМигратора.адресМарии = среда.получитьСвойство("АДРЕС_МАРИИ");
      настройкиМигратора.пользовательМарии = среда.получитьСвойство("ПОЛЬЗОВАТЕЛЬ_МАРИИ");
      настройкиМигратора.парольМарии = среда.получитьСвойство("ПАРОЛЬ_МАРИИ");
      настройкиМигратора.портМарии = среда.получитьСвойство("ПОРТ_МАРИИ");
      настройкиМигратора.базаДанныхМарии = среда.получитьСвойство("БАЗАДАННЫХ_МАРИИ");
      настройкиМигратора.отлад = Целый.вычитатьИзСтроки(среда.получитьСвойство("ОТЛАД", "2000"));
      настройкиМигратора.времяНачала =
          Целый.вычитатьДлииный(среда.получитьСвойство("ВРЕМЯ_НАЧАЛА", "0"));
      настройкиМигратора.времяКонца = Целый.вычитатьДлииный(среда.получитьСвойство("ВРЕМЯ_КОНЦА"));
      настройкиМигратора.файлЛайта = среда.получитьСвойство("ФАЙЛ_ЛАЙТА");
      return настройкиМигратора;
    }
  }
}
